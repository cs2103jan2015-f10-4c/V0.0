//@author: a0134921l



	/**
	 * origin: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\AutometedTesting\IntegratedTest.cpp
	 */

		TEST_METHOD(test_edit)
		{
			Logic* logic = new Logic();
			string userCommand;
			

			userCommand = "add;tutorial;01-01-2015 0900;01-01-2015 1000";
			logic->executeUserCommand(userCommand);
			userCommand = "add;assignment;02-02-2015 2359";
			logic->executeUserCommand(userCommand);
			userCommand = "add;meeting";
			logic->executeUserCommand(userCommand);

			//test for edit fail
			userCommand = "edit;5;meeting;01-02-2013 11:30;02-11-2013 12:00";
			logic->executeUserCommand(userCommand);
			string output = logic->tellGUIResponse();
			string expectedOutput = "Fail to edit task. Task \"5\" is not in the list.";
			Assert::AreEqual(output, expectedOutput);

			//test for timed task
			userCommand = "edit;1;meeting;01-02-2013 11:30;02-11-2013 12:00";
			logic->executeUserCommand(userCommand);
			string taskName = "meeting";
			string startTime = "01-02-2013 11:30";
			string endTime = "02-11-2013 12:00";
			string type = DEFAULT_TYPE_ONE;
			Assert::IsTrue(logic->taskList[0].taskName == taskName);
			Assert::IsTrue(logic->taskList[0].startingTime == startTime);
			Assert::IsTrue(logic->taskList[0].endingTime == endTime);
			Assert::IsTrue(logic->taskList[0].type == type);

			output = logic->tellGUIResponse();
			expectedOutput = "Task 1 is edited successfully.";
			Assert::AreEqual(output, expectedOutput);

			//test for deadline task
			userCommand = "edit;2;project deadline;03-03-2015 1159";
			logic->executeUserCommand(userCommand);
			taskName = "project deadline";
			startTime = "";
			endTime = "03-03-2015 11:59";
			type = DEFAULT_TYPE_TWO;
			Assert::IsTrue(logic->taskList[1].taskName == taskName);
			Assert::IsTrue(logic->taskList[1].startingTime == startTime);
			Assert::IsTrue(logic->taskList[1].endingTime == endTime);
			Assert::IsTrue(logic->taskList[1].type == type);

			output = logic->tellGUIResponse();
			expectedOutput = "Task 2 is edited successfully.";
			Assert::AreEqual(output, expectedOutput);
			
			//test for floating task
			userCommand = "edit;3;studing";
			logic->executeUserCommand(userCommand);
			taskName = "studing";
			startTime = "";
			endTime = "";
			type = DEFAULT_TYPE_THREE;
			Assert::IsTrue(logic->taskList[2].taskName == taskName);
			Assert::IsTrue(logic->taskList[2].startingTime == startTime);
			Assert::IsTrue(logic->taskList[2].endingTime == endTime);
			Assert::IsTrue(logic->taskList[2].type == type);

			output = logic->tellGUIResponse();
			expectedOutput = "Task 3 is edited successfully.";
			Assert::AreEqual(output, expectedOutput);





		}

	};
}
	// End of segment: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\AutometedTesting\IntegratedTest.cpp





	/**
	 * origin: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\AutometedTesting\unittestParser.cpp
	 */


#include "stdafx.h"
#include "CppUnitTest.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using namespace std;

const string TEST_ADD_TIMED_TASK = "add;pj meeting;1/1/2012 1000;1-1-2012 1300";
const string TEST_ADD_TIMED_TASK1 = "add;pj meeting;3/3/2013 1000;1-1-2012 1300";
const string TEST_ADD_DEADLINE_TASK = "add;assignment1;1/1/2011 1300";
const string TEST_ADD_FLOATING_TASK = "add;reply email";
const string TEST_ADD_TASK = "add";

const string TEST_EDIT_TIMED_TASK = "edit;1;hw meeting;3/3/2013 1333;4/4/2014 1444";
const string TEST_EDIT_TIMED_TASK1 = "edit;1;hw meeting;5/5/2015 1500;4/4/2014 1400";
const string TEST_EDIT_DEADLINE_TASK = "edit;2;assignment2;5MAY2015 1555";
const string TEST_EDIT_FLOATING_TASK = "edit;3;send email";

const string TEST_DELETE_TASK = "delete;1";

const string TEST_SEARCH_TASK = "search;assignment";

const string TEST_MARKDONE_TASK = "mark done;2";

const string TEST_DISPLAY_TASK = "display;all";

const string TEST_UNDO_TASK = "undo;";

const string TEST_REDO_TASK = "redo;";

const string TEST_DIRECTORY_TASK = "directory;desktop";

const string TEST_CLEAR_TASK = "clear;";

const string TEST_EXIT_TASK = "exit;";

const string TEST_INVALID_INPUT = "2012-01-01;";

namespace UnitTeststorage
{		
	TEST_CLASS(UnitTestParser)
	{
	public:
		
		TEST_METHOD(testCommandWord)
		{
			Parser parser;
			string testInput;
			testInput = TEST_ADD_TIMED_TASK;
			string testOutput;
			testOutput = parser.getCommandWord(testInput);
			Assert::IsTrue(testOutput == "add");
			
			testInput = TEST_ADD_DEADLINE_TASK;
			testOutput = parser.getCommandWord(testInput);
			Assert::IsTrue(testOutput == "add");

			testInput = TEST_ADD_FLOATING_TASK;
			testOutput = parser.getCommandWord(testInput);
			Assert::IsTrue(testOutput == "add");

			testInput = TEST_EDIT_TIMED_TASK;
			testOutput = parser.getCommandWord(testInput);
			Assert::IsTrue(testOutput == "edit");

			testInput = TEST_EDIT_DEADLINE_TASK;
			testOutput = parser.getCommandWord(testInput);
			Assert::IsTrue(testOutput == "edit");

			testInput = TEST_EDIT_FLOATING_TASK;
			testOutput = parser.getCommandWord(testInput);
			Assert::IsTrue(testOutput == "edit");
			
			testInput = TEST_DELETE_TASK;
			testOutput = parser.getCommandWord(testInput);
			Assert::IsTrue(testOutput == "delete");

			testInput = TEST_SEARCH_TASK;
			testOutput = parser.getCommandWord(testInput);
			Assert::IsTrue(testOutput == "search");

			testInput = TEST_MARKDONE_TASK;
			testOutput = parser.getCommandWord(testInput);
			Assert::IsTrue(testOutput == "mark done");

			testInput = TEST_DISPLAY_TASK;
			testOutput = parser.getCommandWord(testInput);
			Assert::IsTrue(testOutput == "display");

			testInput = TEST_UNDO_TASK;
			testOutput = parser.getCommandWord(testInput);
			Assert::IsTrue(testOutput == "undo");

			testInput = TEST_REDO_TASK;
			testOutput = parser.getCommandWord(testInput);
			Assert::IsTrue(testOutput == "redo");

			testInput = TEST_DIRECTORY_TASK;
			testOutput = parser.getCommandWord(testInput);
			Assert::IsTrue(testOutput == "directory");

			testInput = TEST_CLEAR_TASK;
			testOutput = parser.getCommandWord(testInput);
			Assert::IsTrue(testOutput == "clear");
			
			testInput = TEST_EXIT_TASK;
			testOutput = parser.getCommandWord(testInput);
			Assert::IsTrue(testOutput == "exit");

			testInput = TEST_INVALID_INPUT;
			testOutput = parser.getCommandWord(testInput);
			Assert::IsTrue(testOutput == "Invalid Command");
			
		}
		
		TEST_METHOD(testTaskType)
		{
			Parser parser;

			string testInput;
			testInput = TEST_ADD_TIMED_TASK;
			string testOutput;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getTaskType();
			Assert::IsTrue(testOutput == "timed");
			
			testInput = TEST_ADD_DEADLINE_TASK ;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getTaskType();
			Assert::IsTrue(testOutput == "deadline");

			testInput = TEST_ADD_FLOATING_TASK;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getTaskType();
			Assert::IsTrue(testOutput == "floating");

			testInput = TEST_EDIT_TIMED_TASK;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getTaskType();
			Assert::IsTrue(testOutput == "timed");
			
			testInput = TEST_EDIT_DEADLINE_TASK;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getTaskType();
			Assert::IsTrue(testOutput == "deadline");

			testInput = TEST_EDIT_FLOATING_TASK;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getTaskType();
			Assert::IsTrue(testOutput == "floating");

			testInput = TEST_DISPLAY_TASK;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getTaskType();
			Assert::IsTrue(testOutput == "all");

			testInput = TEST_DIRECTORY_TASK;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getTaskType();
			Assert::IsTrue(testOutput == "desktop");
		}
		
		TEST_METHOD(testTaskName)
		{
			Parser parser;

			string testInput;
			testInput = TEST_ADD_TIMED_TASK;
			string testOutput;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getTaskName();
			Assert::IsTrue(testOutput == "pj meeting");
			
			testInput = TEST_ADD_DEADLINE_TASK ;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getTaskName();
			Assert::IsTrue(testOutput == "assignment1");

			testInput = TEST_ADD_FLOATING_TASK;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getTaskName();
			Assert::IsTrue(testOutput == "reply email");

			testInput = TEST_EDIT_TIMED_TASK;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getTaskName();
			Assert::IsTrue(testOutput == "hw meeting");
			
			testInput = TEST_EDIT_DEADLINE_TASK;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getTaskName();
			Assert::IsTrue(testOutput == "assignment2");

			testInput = TEST_EDIT_FLOATING_TASK;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getTaskName();
			Assert::IsTrue(testOutput == "send email");

		}
		
		TEST_METHOD(testStartTime)
		{
			Parser parser;

			string testInput;
			testInput = TEST_ADD_TIMED_TASK;
			string testOutput;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getStartTime();
			Assert::IsTrue(testOutput == "01-01-2012 10:00");
			
			testInput = TEST_EDIT_TIMED_TASK;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getStartTime();
			Assert::IsTrue(testOutput == "03-03-2013 13:33");
			
		}

		TEST_METHOD(testEndTime)
		{
			Parser parser;

			string testInput;
			testInput = TEST_ADD_TIMED_TASK;
			string testOutput;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getEndTime();
			Assert::IsTrue(testOutput == "01-01-2012 13:00");
			
			testInput = TEST_ADD_DEADLINE_TASK ;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getEndTime();
			Assert::IsTrue(testOutput == "01-01-2011 13:00");
			
			testInput = TEST_EDIT_TIMED_TASK;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getEndTime();
			Assert::IsTrue(testOutput == "04-04-2014 14:44");
			
			testInput = TEST_EDIT_DEADLINE_TASK;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getEndTime();
			Assert::IsTrue(testOutput == "05-05-2015 15:55");
			
		}

		TEST_METHOD(testIndex)
		{
			Parser parser;

			string testInput;
			testInput = TEST_EDIT_TIMED_TASK;
			string output;
			int testOutput;
			output = parser.getCommandWord(testInput);
			testOutput = parser.getIndex();
			Assert::IsTrue(testOutput == 1);

			testInput = TEST_EDIT_DEADLINE_TASK;
			output = parser.getCommandWord(testInput);
			testOutput = parser.getIndex();
			Assert::IsTrue(testOutput == 2);

			testInput = TEST_EDIT_FLOATING_TASK;
			output = parser.getCommandWord(testInput);
			testOutput = parser.getIndex();
			Assert::IsTrue(testOutput == 3);

			testInput = TEST_DELETE_TASK;
			output = parser.getCommandWord(testInput);
			testOutput = parser.getIndex();
			Assert::IsTrue(testOutput == 1);
			
			testInput = TEST_MARKDONE_TASK;
			output = parser.getCommandWord(testInput);
			testOutput = parser.getIndex();
			Assert::IsTrue(testOutput == 2);
			
		}
		
		TEST_METHOD(testSearchWord)
		{
			Parser parser;

			string testInput;
			testInput = TEST_SEARCH_TASK;
			string testOutput;
			testOutput = parser.getCommandWord(testInput);
			testOutput = parser.getSearchWord();
			Assert::IsTrue(testOutput == "assignment");
			
		}
		
		TEST_METHOD(testValidTime)
		{
			Parser parser;

			string testInput;
			testInput = TEST_ADD_TIMED_TASK;
			string output;
			bool testOutput;
			output = parser.getCommandWord(testInput);
			testOutput = parser.getvalidTime();;
			Assert::IsTrue(testOutput);

			testInput = TEST_ADD_TIMED_TASK1;
			output = parser.getCommandWord(testInput);
			testOutput = parser.getvalidTime();;
			Assert::IsTrue(!testOutput);

			testInput = TEST_EDIT_TIMED_TASK;
			output = parser.getCommandWord(testInput);
			testOutput = parser.getvalidTime();;
			Assert::IsTrue(testOutput);

			testInput = TEST_EDIT_TIMED_TASK1;
			output = parser.getCommandWord(testInput);
			testOutput = parser.getvalidTime();;
			Assert::IsTrue(!testOutput);
			
		}
		
		TEST_METHOD(testIsCorrectFormat)
		{
			Parser parser;

			string testInput;
			testInput = TEST_ADD_TASK;
			string output;
			bool testOutput;
			output = parser.getCommandWord(testInput);
			testOutput = parser.getIsCorrectFormat();
			Assert::IsTrue(!testOutput);

			testInput = TEST_ADD_FLOATING_TASK;
			output = parser.getCommandWord(testInput);
			testOutput = parser.getIsCorrectFormat();
			Assert::IsTrue(testOutput);
			
		}
		
		
	};
}

	
	// End of segment: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\AutometedTesting\unittestParser.cpp





	/**
	 * origin: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\AutometedTesting\unittestTime.cpp
	 */


#include "stdafx.h"
#include "CppUnitTest.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using namespace std;

const string TEST_TIME1 = "1-3-2011";
const string TEST_TIME2 = "22-3-2012";
const string TEST_TIME3 = "3-12-2012";
const string TEST_TIME4 = "22-11-2012";
const string TEST_TIME5 = "3-2";
const string TEST_TIME6 = "23-7";
const string TEST_TIME7 = "9-12";
const string TEST_TIME8 = "23-12";
const string TEST_TIME9 = "1/3/2012";
const string TEST_TIME10 = "22/3/2012";
const string TEST_TIME11 = "8/10/2012";
const string TEST_TIME12 = "22/11/2012";
const string TEST_TIME13 = "8/1";
const string TEST_TIME14 = "24/5";
const string TEST_TIME15 = "4/12";
const string TEST_TIME16 = "30/10";
const string TEST_TIME17 = "11Jan2001";
const string TEST_TIME18 = "11JAN2001";
const string TEST_TIME19 = "11jan2001";
const string TEST_TIME20 = "11January2001";
const string TEST_TIME21 = "2Feb2002";
const string TEST_TIME22 = "3MAR2003";
const string TEST_TIME23 = "4apr2004";
const string TEST_TIME24 = "5May2005";
const string TEST_TIME25 = "6JUN2006";
const string TEST_TIME26 = "7jul2007";
const string TEST_TIME27 = "8Aug2008";
const string TEST_TIME28 = "9Sep2009";
const string TEST_TIME29 = "10OCT2010";
const string TEST_TIME30 = "11nov2011";
const string TEST_TIME31 = "12December2012";

const string TEST_TIME32 = "22/11/2012 1326";
const string TEST_TIME33 = "22/11/2012 805";

const string TEST_TIME34 = "22/11/2012 8:33";
const string TEST_TIME35 = "22/11/2012 8:02";
const string TEST_TIME36 = "22/11/2012 10:09";
const string TEST_TIME37 = "22/11/2012 11:34";

const string TEST_TIME38 = "22/11/2012 3.20";
const string TEST_TIME39 = "22/11/2012 3.09";
const string TEST_TIME40 = "22/11/2012 11.06";
const string TEST_TIME41 = "22/11/2012 10.26";

const string TEST_TIME42 = "22/11/2012 0853h";
const string TEST_TIME43 = "22/11/2012 1.34h";
const string TEST_TIME44 = "22/11/2012 15.37h";
const string TEST_TIME45 = "22/11/2012 12:47h";

const string TEST_TIME46 = "22/11/2012 0853am";
const string TEST_TIME47 = "22/11/2012 0853pm";
const string TEST_TIME48 = "22/11/2012 04.34am";
const string TEST_TIME49 = "22/11/2012 04.34pm";
const string TEST_TIME50 = "22/11/2012 11:29am";
const string TEST_TIME51 = "22/11/2012 11:29pm";

/*
const string TEST_TIME34 = "22/11/2012 03:51";
const string TEST_TIME35 = "22/11/2012 05.37";
const string TEST_TIME36 = "22/11/2012 0823h";
const string TEST_TIME37 = "22/11/2012 01.34h";
const string TEST_TIME38 = "22/11/2012 12:47h";
const string TEST_TIME39 = "22/11/2012 12:47h";
const string TEST_TIME40 = "12:47h";
const string TEST_TIME41 = "12:47h";
const string TEST_TIME42 = "12:47h";
const string TEST_TIME43 = "12:47h";
const string TEST_TIME44 = "12:47h";
*/


namespace UnitTeststorage
{		
	TEST_CLASS(UnitTestParser)
	{
	public:
		
		TEST_METHOD(testCommandWord)
		{
			TransformTime transformTime;
			string testInput, testOutput;
			int year, month, day;
			time_t time;
			
			testInput = TEST_TIME1;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 01);
			Assert::IsTrue(month == 03);
			Assert::IsTrue(year == 2011);

			testInput = TEST_TIME2;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 22);
			Assert::IsTrue(month == 03);
			Assert::IsTrue(year == 2012);
			
			testInput = TEST_TIME3;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 03);
			Assert::IsTrue(month == 12);
			Assert::IsTrue(year == 2012);

			testInput = TEST_TIME4;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 22);
			Assert::IsTrue(month == 11);
			Assert::IsTrue(year == 2012);

			testInput = TEST_TIME5;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 03);
			Assert::IsTrue(month == 02);
			
			testInput = TEST_TIME6;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 23);
			Assert::IsTrue(month == 07);

			testInput = TEST_TIME7;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 9);
			Assert::IsTrue(month == 12);

			testInput = TEST_TIME8;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 23);
			Assert::IsTrue(month == 12);

			testInput = TEST_TIME9;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 01);
			Assert::IsTrue(month == 03);
			Assert::IsTrue(year == 2012);

			testInput = TEST_TIME10;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 22);
			Assert::IsTrue(month == 03);
			Assert::IsTrue(year == 2012);

			testInput = TEST_TIME11;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 8);
			Assert::IsTrue(month == 10);
			Assert::IsTrue(year == 2012);

			testInput = TEST_TIME12;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 22);
			Assert::IsTrue(month == 11);
			Assert::IsTrue(year == 2012);

			testInput = TEST_TIME13;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 8);
			Assert::IsTrue(month == 01);
			
			testInput = TEST_TIME14;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 24);
			Assert::IsTrue(month == 5);

			testInput = TEST_TIME15;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 4);
			Assert::IsTrue(month == 12);

			testInput = TEST_TIME16;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 30);
			Assert::IsTrue(month == 10);

			testInput = TEST_TIME17;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 11);
			Assert::IsTrue(month == 1);
			Assert::IsTrue(year == 2001);

			testInput = TEST_TIME18;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 11);
			Assert::IsTrue(month == 1);
			Assert::IsTrue(year == 2001);
			
			testInput = TEST_TIME19;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 11);
			Assert::IsTrue(month == 1);
			Assert::IsTrue(year == 2001);

			testInput = TEST_TIME20;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 11);
			Assert::IsTrue(month == 1);
			Assert::IsTrue(year == 2001);

			testInput = TEST_TIME21;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 2);
			Assert::IsTrue(month == 2);
			Assert::IsTrue(year == 2002);

			testInput = TEST_TIME22;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 3);
			Assert::IsTrue(month == 3);
			Assert::IsTrue(year == 2003);

			testInput = TEST_TIME23;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 4);
			Assert::IsTrue(month == 4);
			Assert::IsTrue(year == 2004);

			testInput = TEST_TIME24;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 5);
			Assert::IsTrue(month == 5);
			Assert::IsTrue(year == 2005);

			testInput = TEST_TIME25;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 6);
			Assert::IsTrue(month == 6);
			Assert::IsTrue(year == 2006);

			testInput = TEST_TIME26;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 7);
			Assert::IsTrue(month == 7);
			Assert::IsTrue(year == 2007);

			testInput = TEST_TIME27;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 8);
			Assert::IsTrue(month == 8);
			Assert::IsTrue(year == 2008);

			testInput = TEST_TIME28;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 9);
			Assert::IsTrue(month == 9);
			Assert::IsTrue(year == 2009);

			testInput = TEST_TIME29;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 10);
			Assert::IsTrue(month == 10);
			Assert::IsTrue(year == 2010);

			testInput = TEST_TIME30;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 11);
			Assert::IsTrue(month == 11);
			Assert::IsTrue(year == 2011);

			testInput = TEST_TIME31;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			year = transformTime.getYear(time);
			month = transformTime.getMonth(time);
			day = transformTime.getDay(time);
			Assert::IsTrue(day == 12);
			Assert::IsTrue(month == 12);
			Assert::IsTrue(year == 2012);

			testInput = TEST_TIME32;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 13:26");
			
			testInput = TEST_TIME33;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 08:05");

			testInput = TEST_TIME34;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 08:33");

			testInput = TEST_TIME35;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 08:02");

			testInput = TEST_TIME36;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 10:09");

			testInput = TEST_TIME37;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 11:34");

			testInput = TEST_TIME38;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 03:20");

			testInput = TEST_TIME39;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 03:09");

			testInput = TEST_TIME40;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 11:06");

			testInput = TEST_TIME41;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 10:26");

			testInput = TEST_TIME42;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 08:53");

			testInput = TEST_TIME43;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 01:34");

			testInput = TEST_TIME44;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 15:37");

			testInput = TEST_TIME45;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 12:47");

			testInput = TEST_TIME46;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 08:53");

			testInput = TEST_TIME47;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 20:53");

			testInput = TEST_TIME48;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 04:34");

			testInput = TEST_TIME49;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 16:34");

			testInput = TEST_TIME50;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 11:29");

			testInput = TEST_TIME51;
			testOutput = transformTime.convertTime(testInput);
			time = transformTime.stringToTime(testOutput);
			Assert::IsTrue(testOutput == "22-11-2012 23:29");

		}
		
		
		
	};
}

	
	// End of segment: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\AutometedTesting\unittestTime.cpp





	/**
	 * origin: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\RHV0.5\Parser.cpp
	 */


#include "Parser.h"
#include "assert.h"
#include <time.h>

const string Parser::DELIMITERS = ";";

Parser::Parser(){
    
}
Parser::~Parser(){
    
}

string Parser::getCommandWord(string command){
    string task = getCommandType(command);
    string detail = getDetail(command);
    if(task == "add"){
        size_t type = count(detail.begin(), detail.end(), ';');
        if (type == 2) {
            taskType = "timed";
            isCorrectFormat = true;
            taskName = getTaskName(detail);
            startTime = getStartDetail2(detail);
            endTime = getEndDetail(detail);
            startTime = TransformTime.convertTime(startTime);
            endTime = TransformTime.convertTime(endTime);
            validTime = TransformTime.checkTime(startTime,endTime);
        }
        else if (type == 1){
            taskType = "deadline";
            isCorrectFormat = true;
            taskName = getTaskName(detail);
            startTime = "";
            endTime = getStartDetail1(detail);
            endTime = TransformTime.convertTime(endTime);
            validTime = true;
        }
        else if (detail=="add" && type == 0){
         isCorrectFormat = false;
        }
        else if (type == 0){
            taskType = "floating";
            isCorrectFormat = true;
            taskName = getTaskName(detail);
            startTime = "";
            endTime = "";
            validTime = true;
        }
        else{
        }
        if (detail==""){
            isCorrectFormat = false;
        }
        
    }
    else if(task == "delete"){
        index = getIndex(detail);
    }
    else if(task == "edit"){
        index = getIndex(detail);
        string editDetail = getDetail(detail);
        size_t numberOfDelimiter = count(editDetail.begin(), editDetail.end(), ';');
        
        if (numberOfDelimiter == 2){
            taskType = "timed";
            taskName = getTaskName(editDetail);
            startTime = getStartDetail2(editDetail);
            startTime = TransformTime.convertTime(startTime);
            endTime = getEndDetail(editDetail);
            endTime = TransformTime.convertTime(endTime);
            validTime = TransformTime.checkTime(startTime,endTime);
        }
        else if (numberOfDelimiter == 1){
            taskType = "deadline";
            taskName = getTaskName(editDetail);
            startTime = "";
            endTime = getStartDetail1(editDetail);
            endTime = TransformTime.convertTime(endTime);
            validTime = true;
        }
        else{
            taskType = "floating";
            taskName = getTaskName(editDetail);
            startTime = "";
            endTime = "";
            validTime = true;
        }
        
    }else if(task == "search"){
        searchWord = detail;
    }else if(task == "mark done"){
        index = getIndex(detail);
    }else if(task == "display"){
        taskType = detail;
    }else if(task == "undo"){
        
    }else if(task == "redo"){
        
    }else if(task == "directory"){
        taskType = detail;
    }else if(task == "clear"){
        
    }else if(task == "exit"){
        
    }else {
        task = "Invalid Command";
    }
    return task;
}


string Parser::getTaskType(){
    return taskType;
}

string Parser::getTaskName(){
    return taskName;
}

string Parser::getStartTime(){
    return startTime;
}

string Parser::getEndTime(){
    return endTime;
}

int Parser::getIndex(){
    return index;
}

string Parser::getSearchWord(){
    return searchWord;
}

bool Parser::getvalidTime(){
    return validTime;
}

bool Parser::getIsCorrectFormat(){
    return isCorrectFormat;
}



string Parser::getCommandType(string input){
    size_t positionA = 0;
    size_t positionB = 0;
    string task;
    positionB = input.find_first_of(DELIMITERS);
    task = input.substr(positionA, positionB - positionA);
    return task;
}

string Parser::getDetail(string input){
    size_t positionA = 0;
    string detail;
    positionA = input.find_first_of(DELIMITERS);
    positionA++;
    detail = input.substr(positionA);
    return detail;
}

int Parser::getIndex(string input){
    int index = atoi(input.c_str());
    return index;
}

string Parser::getTaskName(string input){
    size_t positionA = 0;
    size_t positionB = 0;
    string task;
    positionB = input.find_first_of(DELIMITERS);
    task = input.substr(positionA, positionB - positionA);
    return task;
}

string Parser::getStartDetail1(string input){
    size_t positionA = 0;
    size_t positionB = 0;
    string time;
    positionA = input.find_first_of(DELIMITERS) + 1;
    positionB = input.find_last_of(DELIMITERS);
    time = input.substr(positionA, positionB - positionA);
    return time;
}

string Parser::getStartDetail2(string input){
    size_t positionA = 0;
    size_t positionB = 0;
    size_t positionC = 0;
    string time;
    
    positionA = input.find_first_of(DELIMITERS) + 1;
    positionC = input.size();
    string temp = input.substr(positionA, positionC - positionA);
    positionB = temp.find_first_of(DELIMITERS);
    positionA = 0;
    time = temp.substr(positionA, positionB - positionA);
    return time;
}

string Parser::getEndDetail(string input){
    size_t positionA = 0;
    size_t positionB = 0;
    size_t positionC = 0;
    string time;
    
    positionA = input.find_first_of(DELIMITERS) + 1;
    positionC = input.size();
    string temp = input.substr(positionA, positionC - positionA);
    positionB = temp.find_first_of(DELIMITERS) + 1;
    positionA = temp.find_first_of(DELIMITERS) + 1;
    time = temp.substr(positionB, positionC - positionB);
    return time;
}

	// End of segment: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\RHV0.5\Parser.cpp





	/**
	 * origin: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\RHV0.5\Parser.h
	 */


#ifndef PARSER_H
#define PARSER_H

#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include "TransformTime.h"

using namespace std;

class Parser{
    
private:
	TransformTime TransformTime;
    static const string DELIMITERS;    
    static  string USER_PROMPT_TASKNAME ;
    static  string USER_PROMPT_STARTTIME;
    static  string USER_PROMPT_ENDTIME;
    static  string USER_PROMPT_INDEX;
    static  string USER_PROMPT_KEYWORD ;
    static  string USER_PROMPT_NEWTASKNAME ;
    static  string USER_PROMPT_NEWSTARTTIME ;
    static  string USER_PROMPT_NEWENDTIME ;
    
    string taskType;
    string taskName;
    string startTime;
    string endTime;
    int index;
    string searchWord;
    bool validTime;
    bool isCorrectFormat;
    
    string getCommandType(string);
    string getDetail(string);
    int getIndex(string);
    string getTaskName(string);
    string getStartDetail1(string);
    string getStartDetail2(string);
    string getEndDetail(string);
    
    
public:
    Parser();
    
    ~Parser();
    string getCommandWord(string command);
    
    string getTaskType();
    
    string getTaskName();
    
    string getStartTime();
    
    string getEndTime();
    
    int getIndex();
    
    string getSearchWord();
    
    bool getvalidTime();
    
    bool getIsCorrectFormat();
};

#endif

	// End of segment: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\RHV0.5\Parser.h





	/**
	 * origin: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\RHV0.5\TransformTime.cpp
	 */


#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include "TransformTime.h"

TransformTime::TransformTime(){}
TransformTime::~TransformTime(){}

time_t TransformTime::stringToTime(string t){
    string inputTime = t;
    time_t outputTime;
    char y[5];                                 // YEAR
    char m[3];                                 // MONTH
    char d[3];                                 // DAY
    char h[3];                                 // HOUR
    char n[3];                                 // MINUTE
    struct tm when;
    
    char input[1024];
    strcpy(input, inputTime.c_str());
    char day[20];
    char time[20];
    // Break down String
    sscanf(input, "%19s %19s", day, time);
    sscanf(day, "%2s-%2s-%4s", d, m, y);
    sscanf(time, "%[^:]:%s", h, n);
    
    // Convertion
    when.tm_year = atoi(y) - 1900;
    when.tm_mon = atoi(m) - 1;
    when.tm_mday = atoi(d);
    when.tm_hour = atoi(h);
    when.tm_min = atoi(n) - 40;
    when.tm_sec = 0;
    
    outputTime = mktime(&when);
    return outputTime;
}

bool TransformTime::checkTime(string startTime,string endTime){
    time_t start = stringToTime(startTime);
    time_t end = stringToTime(endTime);
    if (start < end){
        return true;
    }
    else{
        return false;
    }

}

string TransformTime::timeToString(time_t t){
    time_t inputTime = t;
    tm *timeinfo = localtime(&inputTime);
    char yyyymmddhhnn[40];
    strftime (yyyymmddhhnn,40,"%d-%m-%Y %H:%M",timeinfo);
    string outputTime(yyyymmddhhnn);
    return outputTime;
}

int TransformTime::getYear(time_t t){
    time_t inputTime = t;
    tm *timeinfo = localtime(&inputTime);
    year = timeinfo->tm_year;
    year += 1900;
    return year;
}

int TransformTime::getMonth(time_t t){
    time_t inputTime = t;
    tm *timeinfo = localtime(&inputTime);
    month = timeinfo->tm_mon;
    month += 1;
    return month;
}

int TransformTime::getDay(time_t t){
    time_t inputTime = t;
    tm *timeinfo = localtime(&inputTime);
    day = timeinfo->tm_mday;
    return day;
}

int TransformTime::getHour(time_t t){
    time_t inputTime = t;
    tm *timeinfo = localtime(&inputTime);
    hour = timeinfo->tm_hour;
    return hour;
}

int TransformTime::getMin(time_t t){
    time_t inputTime = t;
    tm *timeinfo = localtime(&inputTime);
    min = timeinfo->tm_min;
    return min;
}

string TransformTime::getCurrentTime(){
    time_t rawtime;
    struct tm * timeinfo;
    time (&rawtime);
    timeinfo = localtime (&rawtime);
    string currentTime = timeToString(rawtime);
    return currentTime;
}

size_t getSize(char *ptr){
    return sizeof(ptr);
}

string TransformTime::convertTime(string input){
    
    char year[5];                                 // YEAR
    char month[3];                                // MONTH
    char day[3];                                  // DAY
    char hour[3];                                 // HOUR
    char minute[3];                               // MINUTE
    
    time_t rawtime;
    struct tm * timeinfo;
    time(&rawtime);
    timeinfo = localtime(&rawtime);
    strftime(year, sizeof(year), "%Y", timeinfo);
    strftime(month, sizeof(month), "%m", timeinfo);
    strftime(day, sizeof(day), "%d", timeinfo);
    strftime(hour, sizeof(hour), "%H", timeinfo);
    strftime(minute, sizeof(minute), "%M", timeinfo);

	char *inputTime = new char[input.length()]; // creat the char to store the input
    strcpy(inputTime, input.c_str()); // convert string to char[]

    bool HasTimeDay = false; // check the input who has time and day
    bool HasTime = false; // check the input who has time
    bool HasDay = false; // check the input who has day
    
    int space = 0;
    
    for(unsigned i=0; i<strlen(inputTime); i++){
        if(inputTime[i] == ' '){
            HasTimeDay = true;
            space = i;
        }
    }
    
    int sizeOfTime = 0;
    int sizeOfDay = 0;
    
    if(HasTimeDay){
        sizeOfDay = space;
        sizeOfTime = strlen(inputTime)-space-1;
    }
    
    if(!HasTimeDay){
        if(strlen(inputTime) > 7){
            sizeOfDay = strlen(inputTime);
        }
        else{
            for(unsigned i=0; i<strlen(inputTime); i++){
                if((inputTime[i]==47 || inputTime[i]==45)){
                    sizeOfDay = strlen(inputTime);
                }
                else{
                    sizeOfTime = strlen(inputTime);
                }
            }
        }
    }

    char *Theday = new char[sizeOfDay];
    char *Thetime = new char[sizeOfTime];
    
    if (HasTimeDay){
		unsigned i;
        for(i=0; i<space; i++){
            Theday[i] = inputTime[i];
        }
        HasDay = true;
        i++;
        int j=0;
        for( ; i<strlen(inputTime); i++){
            Thetime[j] = inputTime[i];
            j++;
        }
        HasTime = true ;
    }
    
   
    if (!HasTimeDay){
        if(strlen(inputTime) > 7){
            HasDay = true;
            for( unsigned i = 0 ; i<strlen(inputTime); i++){
                Theday[i] = inputTime[i];
            }
        }
        else{
            for(unsigned i=0; i<strlen(inputTime); i++){
                if ((inputTime[i]==47 || inputTime[i]==45)){
                    HasDay = true ;
                }
            }
           
            if(!HasDay){
                HasTime = true ;
                for(unsigned i=0; i<strlen(inputTime); i++){
                    Thetime[i] = inputTime[i];
                }
            }
            else{
                for(unsigned i=0; i<strlen(inputTime); i++){
                    Theday[i] = inputTime[i];
                }
            }
        }
    }
    
    if(HasTime){
        if(sizeOfTime<4){
            //the format: HMM
            hour[0] = '0';
            hour[1] = Thetime[0];
            minute[0] = Thetime[1];
            minute[1] = Thetime[2];
        }
        else if(sizeOfTime < 5){
            //the format: HHMM
            hour[0] = Thetime[0];
            hour[1] = Thetime[1];
            minute[0] = Thetime[2];
            minute[1] = Thetime[3];
        }
        else if(sizeOfTime<6 && (Thetime[2]==58||Thetime[2]==46)){
            //the format: HH:MM
            hour[0] = Thetime[0];
            hour[1] = Thetime[1];
            minute[0] = Thetime[3];
            minute[1] = Thetime[4];
        }
        else{
            if(Thetime[sizeOfTime-1] == 'h'){
                //the format: XX:XXh XX:.XXh XXXXh
                hour[0] = Thetime[0];
                hour[1] = Thetime[1];
                minute[0] = Thetime[sizeOfTime-3];
                minute[1] = Thetime[sizeOfTime-2];
            }
            else if(Thetime[sizeOfTime-1] == 'm'){
                //the format: am/apm
                if(Thetime[sizeOfTime-2] == 'a'){
                    //the format: XX:XXam XX:.XXam XXXXam
                    hour[0] = Thetime[0];
                    hour[1] = Thetime[1];
                    minute[0] = Thetime[sizeOfTime-4];
                    minute[1] = Thetime[sizeOfTime-3];
                }
                else{
                    //the format: XX:XXpm XX:.XXpm XXXXpm
                    if (Thetime[1] == '1'){
                        if(Thetime[0] == '0'){
                            hour[0] = '1';
                            hour[1] = '3';
                        }
                        else if(Thetime[0] == '1'){
                            hour[0] = '2';
                            hour[1] = '3';
                        }
                    }
                    else if(Thetime[1] == '2'){
                        if(Thetime[0] == '0'){
                            hour[0] = '1';
                            hour[1] = '4';
                        }
                        else if(Thetime[0] == '1'){
                            hour[0] = '2';
                            hour[1] = '4';
                        }
                    }
                    else if(Thetime[1] == '3'){
                        hour[0] = '1';
                        hour[1] = '5';
                    }
                    else if(Thetime[1] == '4'){
                        hour[0] = '1';
                        hour[1] = '6';
                    }
                    else if(Thetime[1] == '5'){
                        hour[0] = '1';
                        hour[1] = '7';
                    }
                    else if(Thetime[1] == '6'){
                        hour[0] = '1';
                        hour[1] = '8';
                    }
                    else if(Thetime[1] == '7'){
                        hour[0] = '1';
                        hour[1] = '9';
                    }
                    else if(Thetime[1] == '8'){
                        hour[0] = '2';
                        hour[1] = '0';
                    }
                    else if(Thetime[1] == '9'){
                        hour[0] = '2';
                        hour[1] = '1';
                    }
                    else if(Thetime[1] == '0'){
                        hour[0] = '2';
                        hour[1] = '2';
                    }
                    minute[0] = Thetime[sizeOfTime-4];
                    minute[1] = Thetime[sizeOfTime-3];
                }
            }
        }
    }

    if(HasDay){
        int i = 0;
        int j = 0;
        int number = 0;
        for(int x=0; x<sizeOfDay; x++){
            if (!(Theday[x] >= 48 && Theday[x] <= 57)){
                number++;
                if(number == 1){
                    i = x;
                }
                else{
                    j = x;
                }
            }
        }

        if(number==1){
            //the format: dd-mm dd/mm
            if(i==1){
                if(sizeOfDay==3){
                    day[0] = '0';
                    day[1] = Theday[0];
                    month[0] = '0';
                    month[1] = Theday[2];
                }
                else if(sizeOfDay==4){
                    day[0] = '0';
                    day[1] = Theday[0];
                    month[0] = Theday[2];
                    month[1] = Theday[3];
                }
            }
            else if(i==2){
                if (sizeOfDay==4){
                    day[0] = Theday[0];
                    day[1] = Theday[1];
                    month[0] = '0';
                    month[1] = Theday[3];
                }
                else if(sizeOfDay==5){
                    day[0] = Theday[0];
                    day[1] = Theday[1];
                    month[0] = Theday[3];
                    month[1] = Theday[4];
                }
            }
        }
        else if(number == 2){
            //the format: dd-mm dd/mm
            if(i==1 && j ==3){
                day[0] = '0';
                day[1] = Theday[0];
                month[0] = '0';
                month[1] = Theday[2];
                year[0] = Theday[4];
                year[1] = Theday[5];
                year[2] = Theday[6];
                year[3] = Theday[7];
            }
            else if(i==1 && j ==4){
                day[0] = '0';
                day[1] = Theday[0];
                month[0] = Theday[2];
                month[1] = Theday[3];
                year[0] = Theday[5];
                year[1] = Theday[6];
                year[2] = Theday[7];
                year[3] = Theday[8];
            }
            else if(i==2 && j ==4){
                day[0] = Theday[0];
                day[1] = Theday[1];
                month[0] = '0';
                month[1] = Theday[3];
                year[0] = Theday[5];
                year[1] = Theday[6];
                year[2] = Theday[7];
                year[3] = Theday[8];
            }
            else if(i==2 && j ==5){
                day[0] = Theday[0];
                day[1] = Theday[1];
                month[0] = Theday[3];
                month[1] = Theday[4];
                year[0] = Theday[6];
                year[1] = Theday[7];
                year[2] = Theday[8];
                year[3] = Theday[9];
            }
        }
        else if(number > 2){
            string tempMonth;
            char temp[3];
            if(i==1){
                day[0] = '0';
                day[1] = Theday[0];
                year[0] = Theday[sizeOfDay-4];
                year[1] = Theday[sizeOfDay-3];
                year[2] = Theday[sizeOfDay-2];
                year[3] = Theday[sizeOfDay-1];
                temp[0]=Theday[1];
                temp[1]=Theday[2];
                temp[2]=Theday[3];  
            }
            else if(i==2){
                day[0] = Theday[0];
                day[1] = Theday[1];
                year[0] = Theday[sizeOfDay-4];
                year[1] = Theday[sizeOfDay-3];
                year[2] = Theday[sizeOfDay-2];
                year[3] = Theday[sizeOfDay-1];
                temp[0]=Theday[2];
                temp[1]=Theday[3];
                temp[2]=Theday[4];
            }
			if ((temp[0]=='J')||(temp[0]=='j')){
				if ((temp[1]=='A')||(temp[1]=='a')){
					month[0] = '0';
					month[1] = '1';
				}
				else if ((temp[2]=='L')||(temp[2]=='l')){
					month[0] = '0';
					month[1] = '7';
				}
				else{
					month[0] = '0';
					month[1] = '6';
				}
			}
			else if ((temp[0]=='F')||(temp[0]=='f')){
				month[0] = '0';
				month[1] = '2';
			}
			else if ((temp[0]=='M')||(temp[0]=='m')){
				if ((temp[2]=='R')||(temp[2]=='r')){
					month[0] = '0';
					month[1] = '3';
				}
				else{
					month[0] = '0';
					month[1] = '5';
				}
			}
			else if ((temp[0]=='A')||(temp[0]=='a')){
				if ((temp[1]=='P')||(temp[1]=='p')){
					month[0] = '0';
					month[1] = '4';
				}
				else{
					month[0] = '0';
					month[1] = '8';
				}
			}
			else if ((temp[0]=='S')||(temp[0]=='s')){
				month[0] = '0';
                month[1] = '9';
			}
			else if ((temp[0]=='O')||(temp[0]=='o')){
				month[0] = '1';
                month[1] = '0';
			}
			else if ((temp[0]=='N')||(temp[0]=='n')){
				month[0] = '1';
                month[1] = '1';
			}
			else if ((temp[0]=='D')||(temp[0]=='d')){
				month[0] = '1';
                month[1] = '2';
			}
        }
    }
    struct tm when;
    time_t outputTime = mktime(&when);
    
    when.tm_year = atoi(year)-1900;
    when.tm_mon = atoi(month)-1;
    when.tm_mday = atoi(day);
    when.tm_hour = atoi(hour);
    when.tm_min = atoi(minute);
    when.tm_sec = 0;
    outputTime = mktime(&when);

    string output = timeToString(outputTime);
    return output;
}







	// End of segment: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\RHV0.5\TransformTime.cpp





	/**
	 * origin: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\RHV0.5\TransformTime.h
	 */


#ifndef StringToTime_H
#define StringToTime_H

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <time.h>

using namespace std;

class TransformTime{
    
private:
    int year;
    int month;
    int day;
    int hour;
    int min;
    
public:
    string startingTime;
    string endingTime;
    time_t sTime;
    time_t eTime;
    string output;
    
    TransformTime();
    
    ~TransformTime();
    // input the time(String format:yyyy-mm-dd hh:mm). Output the the time_t format
    time_t stringToTime(string t);
    // input the time_t format. output the time(String format:yyyy-mm-dd hh:mm)
    string timeToString(time_t t);
    // input the time_t. output the year
    int getYear(time_t t);
    // input the time_t. output the month
    int getMonth(time_t t);
    // input the time_t. output the day
    int getDay(time_t t);
    // input the time_t. output the hour
    int getHour(time_t t);
    // input the time_t. output the min
    int getMin(time_t t);
    
    string getCurrentTime();

    string convertTime(string input);
    
    bool checkTime(string startTime,string endTime);
    
};

#endif



	// End of segment: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\RHV0.5\TransformTime.h





