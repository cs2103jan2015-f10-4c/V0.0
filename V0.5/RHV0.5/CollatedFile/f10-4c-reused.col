//@author: f10-4c-reused



	/**
	 * origin: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\RHV0.5\Logger.cpp
	 */


#include "Logger.h"

const string LOG_FILENAME = "logFile.txt";

RHLogger::RHLogger() {
}

void RHLogger::addLog(string newLog) {
	_logContent.push_back(newLog);
}

//write log entries into the file named "logFile.txt"
void RHLogger::saveLog() {
	ofstream writeFile(LOG_FILENAME.c_str());

	for (unsigned int i = 0; i < _logContent.size(); i++) {
		writeFile << _logContent[i] << endl;
	}

	writeFile.close();
}

vector<string> RHLogger::getLogContent(){
	return _logContent;
}
	// End of segment: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\RHV0.5\Logger.cpp





	/**
	 * origin: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\RHV0.5\Logger.h
	 */

#ifndef LOGGER_H
#define LOGGER_H

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include "TransformTime.h"
using namespace std;


//Logger class is defined to keep track of the internal process of the running program.
//When ever an important action is made in the program, 
//a sentence will be stored in the logger file.
//This file can help us to check the progress of the program.
//Whenever a failure is incurred, user or developer can always refer to it for the elapsed point.

class RHLogger{
private:
    vector<string> _logContent;

public:
	//This method is to return the current status 
	//of the logger object and allows modification in any otehr class
	static RHLogger& getInstance() {
		static RHLogger instance;
		return instance;
	}

	void addLog(string);
	void saveLog();
    RHLogger();

	vector<string> getLogContent();

	
};

#endif

	// End of segment: C:\Users\svmsung\Desktop\cs\V0.5\RHV0.5\RHV0.5\Logger.h





